import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import instaloader

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class InstagramBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self.L = instaloader.Instaloader()
        
        # Add handlers
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Send welcome message when command /start is issued."""
        user = update.effective_user
        await update.message.reply_text(
            f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}! üëã\n\n"
            "‡§Æ‡•à‡§Ç Instagram Info Bot ‡§π‡•Ç‡§Å!\n\n"
            "‡§¨‡§∏ ‡§Æ‡•Å‡§ù‡•á Instagram username ‡§≠‡•á‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§â‡§∏‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n"
            "Commands:\n"
            "/start - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n"
            "/help - ‡§Æ‡§¶‡§¶ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Send help message when command /help is issued."""
        help_text = """
ü§ñ **Instagram Info Bot Help**

üìù **Usage:**
‡§¨‡§∏ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä Instagram username ‡§ï‡•ã ‡§Æ‡•Å‡§ù‡•á ‡§≠‡•á‡§ú‡•á‡§Ç (‡§¨‡§ø‡§®‡§æ @ ‡§ï‡•á)

üìä **‡§Æ‡•à‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•Ç‡§Ç‡§ó‡§æ:**
‚úÖ Profile information
‚úÖ Followers count
‚úÖ Following count
‚úÖ Posts count
‚úÖ Bio
‚úÖ Profile picture
‚úÖ Private/Public status

‚ö†Ô∏è **Note:** ‡§Ø‡§π ‡§¨‡•â‡§ü ‡§∏‡§ø‡§∞‡•ç‡§´ public accounts ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
        """
        await update.message.reply_text(help_text)
    
    def get_instagram_info(self, username: str):
        """Get Instagram profile information."""
        try:
            # Remove @ symbol if present
            username = username.replace('@', '').strip()
            
            # Get profile info
            profile = instaloader.Profile.from_username(self.L.context, username)
            
            info = {
                'success': True,
                'username': profile.username,
                'user_id': profile.userid,
                'full_name': profile.full_name,
                'followers': profile.followers,
                'following': profile.followees,
                'posts': profile.mediacount,
                'bio': profile.biography,
                'is_private': profile.is_private,
                'is_verified': profile.is_verified,
                'profile_pic_url': profile.profile_pic_url,
                'external_url': profile.external_url
            }
            return info
            
        except instaloader.exceptions.ProfileNotExistsException:
            return {'success': False, 'error': 'Profile does not exist'}
        except instaloader.exceptions.PrivateProfileNotFollowedException:
            return {'success': False, 'error': 'Private profile - cannot access'}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming messages."""
        username = update.message.text.strip()
        
        # Show typing action
        await update.message.chat.send_action(action="typing")
        
        # Get Instagram info
        info = self.get_instagram_info(username)
        
        if not info['success']:
            await update.message.reply_text(
                f"‚ùå Error: {info['error']}\n\n"
                "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä username ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø account public ‡§π‡•à‡•§"
            )
            return
        
        # Format response
        response = f"""
üì± **Instagram Profile Info**

üë§ **Username:** @{info['username']}
üÜî **User ID:** {info['user_id']}
üë®‚Äçüíº **Full Name:** {info['full_name'] or 'N/A'}

üìä **Statistics:**
üë• **Followers:** {info['followers']:,}
üë• **Following:** {info['following']:,}
üì∏ **Posts:** {info['posts']:,}

üìù **Bio:**
{info['bio'] or 'No bio'}

üîó **External URL:** {info['external_url'] or 'N/A'}

üîí **Account Type:** {'Private üîê' if info['is_private'] else 'Public üåê'}
‚úÖ **Verified:** {'Yes ‚úÖ' if info['is_verified'] else 'No ‚ùå'}

        """
        
        # Send profile picture if available
        if info['profile_pic_url']:
            try:
                await update.message.reply_photo(
                    photo=info['profile_pic_url'],
                    caption=response
                )
                return
            except:
                pass
        
        # If photo couldn't be sent, send text only
        await update.message.reply_text(response)
    
    def run(self):
        """Start the bot."""
        print("ü§ñ Bot is running...")
        self.app.run_polling()

# Bot Configuration
BOT_TOKEN = "8288719212:AAHfmlschKmtJWo5zor4YV3lkKImRffW1aQ"

if __name__ == "__main__":
    bot = InstagramBot(BOT_TOKEN)
    bot.run()
